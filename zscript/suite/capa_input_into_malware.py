from helpers import *
import subprocess
import sys

"""
At MITRE, we will sometimes run capa on actual malware samples to analyze them, and the output looks like the following:

+------------------------+------------------------------------------------------------------------------------+
| md5                    | 85cda7c5e28830bcf7698bf25083b36b                                                   |
| sha1                   | 596db0a81cdbabf9a314c61ca86286dc4c338e02                                           |
| sha256                 | e3711dc2049c37e14449066450da86ca1c9a96fecdadbb3ed9d594564b5a829e                   |
| os                     | windows                                                                            |
| format                 | pe                                                                                 |
| arch                   | i386                                                                               |
| path                   |                      |
+------------------------+------------------------------------------------------------------------------------+


+------------------------+------------------------------------------------------------------------------------+
| ATT&CK Tactic          | ATT&CK Technique                                                                   |
|------------------------+------------------------------------------------------------------------------------|
| DEFENSE EVASION        | Obfuscated Files or Information T1027                                              |
|                        | Obfuscated Files or Information::Indicator Removal from Tools T1027.005            |
| DISCOVERY              | File and Directory Discovery T1083                                                 |
|                        | Query Registry T1012                                                               |
| EXECUTION              | Shared Modules T1129                                                               |
| PERSISTENCE            | Boot or Logon Autostart Execution::Registry Run Keys / Startup Folder T1547.001    |
+------------------------+------------------------------------------------------------------------------------+

+-----------------------------+-------------------------------------------------------------------------------+
| MBC Objective               | MBC Behavior                                                                  |
|-----------------------------+-------------------------------------------------------------------------------|
| DATA                        | Decompress Data::aPLib [C0025.003]                                            |
+-----------------------------+-------------------------------------------------------------------------------+

+------------------------------------------------------+------------------------------------------------------+
| CAPABILITY                                           | NAMESPACE                                            |
|------------------------------------------------------+------------------------------------------------------|
| decompress data using aPLib                          | data-manipulation/compression                        |
| contain a resource (.rsrc) section                   | executable/pe/section/rsrc                           |
+------------------------------------------------------+------------------------------------------------------+


This program will parse input like above, and insert the appropriate details into the corresponding malware file.

A few notes:

1. objects/behaviors and extended ATT&CK techniques (B,E,F,C) should go under existing tables
2. For description, we need to match the rule names given in the CAPABILITY table. For example, Data::Decompress Data::aPLib [C0025.003] would be matched to  "decompress data using aPLib". Also, include the number of times the rule hit in the description ("This capa rule had 4 matches.")
3. Hash values added to IoC section
4. References would look like "[1] capa v3.1, analyzed at MITRE on 11/5/2022"

"""




def analyze_capa_input(capa_lines, malware_path):
    """Parses read capa file and returns the data in a dict

    Args:
        - capa file in the form of a LIST (using .readlines() or .read() w/ .split())
        - path of malware_file
    Returns:
        {
           "SHA256": ,
           "ATT&CK Techniques": [
                {
                    "name": ,
                    "ID": ,
                    "description": ,
                    "matches":
                } 
           ]
           "MBC Behaviors": [
                {
                    "name": ,
                    "ID": ,
                    "description": ,
                    "path": ,
                    "matches":
                }
            ]
        }
    """
    return_dict = {
        "SHA256": "",
        "ATTACK Techniques": [],
        "MBC Behaviors": []
    }


    # capabilities = [
    #     {
    #         "capability": ,
    #         "matches": ,
    #         "namespace": 
    #     },
    #     {
    #     },
    # ]
    capabilities = []

    current_section = ""
    current_obj = ""
    for line in capa_lines:
        if "sha256" in line:
            return_dict["SHA256"] = line.split("|")[2].strip()
            continue
        if "ATT&CK Tactic" in line:
            current_section = "attack"   
            continue 
        if "MBC Objective" in line:
            current_section = "mbc" 
            continue
        if "CAPABILITY" in line:
            current_section = "capability"
            continue
        
        if ('--' in line and ('+' in set(line) or '|' in set(line))) or line == "\n" or current_section == "": # skip blank or border lines
            continue

        # Splits "| DISCOVERY              | File and Directory Discovery T1083                                                 |" into obj: DISCOVERY, method: File and Dire....
        # Checks of obj is non-whitespace
        if current_section == "attack" or current_section == "mbc":
            str_split = line.split("|")
            obj = str_split[1].title().strip()
            method = str_split[2].strip()
            id = method.split(" ")[-1]
            method = method.rsplit(' ', 1)[0]  # cut off ID
        
        if not obj == '':
            current_obj = obj

        if current_section == "attack":
            name = current_obj + "::" + method
            attack = {
                "name": name,
                "ID": id
            }
            return_dict["ATTACK Techniques"].append(attack)

        if current_section == "mbc":
            name = current_obj + "::" + method
            id = id.replace("[", "").replace("]", "")
            behavior = {
                "name": name,
                "ID": id,
                "path": match_name_with_path(name, config['MBCdir']['MBCPath']+'/xample-malware')
            }
            return_dict["MBC Behaviors"].append(behavior)

        if current_section == "capability":
            str_split = line.split("|")
            capability_description = str_split[1].strip()
            capability_namespace = str_split[2].strip()

            # Detects if "(x matches) present in capability description", matches = x. If none, matches = 1
            matches = regex_match_single('\((\d+) matches\)', line)
            if matches is None:
                matches = 1
            else:
                capability_description = capability_description.split('(')[0].strip()
            
            capability = {
                "capability": capability_description,
                "matches": matches,
                "namespace": capability_namespace
            }

            capabilities.append(capability)


    # Here, try and match mbc behaviors to a capability to create description
    # Uses subprocess to run cmd line 'grep' 'to search for the behavior ID within capa, and tries to match the results with capabilities
    for behavior in return_dict["MBC Behaviors"]:
        id = '\\[{}\\]'.format(behavior["ID"])
        args = ['grep', '-r', id, config['capaPath']]
        result = subprocess.run(args, capture_output=True, text=True).stdout
        result = result.split('\n')
        matched = False

        for l in result:
            if matched is True:
                break

            # each l here should look like "anti-analysis/obfuscation/string/stackstring/contain-obfuscated-stackstrings.yml:      - Anti-Static Analysis::Disassembler Evasion::Argument Obfuscation [B0012.001]"
            # it's going to get split by '.yml' to just have "anti-analysis/obfuscation/string/stackstring/contain-obfuscated-stackstrings", and then match that with namespace + capability
            l = l.split('.yml')[0].replace(config['capaPath'], '')
            for capability in capabilities:
                to_match = capability["namespace"] + "/" + capability["capability"].lower().replace(' ', '-')

                if to_match == l:
                    behavior["description"] = capability["capability"]
                    behavior["matches"] = capability["matches"]
                    matched = True
                    break
                   
        if matched is False:
            behavior["description"] = None
            behavior["matches"] = None

            print("[+] No capability matched for {}".format(behavior['name']))

    # Do the same thing for ATTACK
    for technique in return_dict["ATTACK Techniques"]:
        id = '\\[{}\\]'.format(technique["ID"])
        args = ['grep', '-r', id, config['capaPath']]
        result = subprocess.run(args, capture_output=True, text=True).stdout
        result = result.split('\n')
        matched = False

        for l in result:
            l = l.split('.yml')[0].replace(config['capaPath'], '')
            for capability in capabilities:
                to_match = capability["namespace"] + "/" + capability["capability"].lower().replace(' ', '-')

                if to_match == l:
                    technique["description"] = capability["capability"]
                    technique["matches"] = capability["matches"]
                    matched = True
                    break
            
            if matched is True:
                break
        
        if matched is False:
            technique["description"] = None
            technique["matches"] = None

            print("[+] No capability matched for {}".format(technique['name']))

    return return_dict
        
def insert_capa_input(capa_dict, malware_dict):
    """Inserts data from capa analysis into malware dict where appropriate

    Args:
        - dict containing capa analysis from analyze_capa_input()
        - dict containing malware analysis from analyze_malware_file_all

    Returns:
        - updated malware dict

    """
    # Check if capa analysis is already present in the references section. If it is, note down the ref number. If not, note new ref number which is length of refdict + 1
    if config['Malware']['capaRefStr'] in malware_dict['References'].values():
        refnum = {i for i in malware_dict['References'] if malware_dict['References'][i]==config['Malware']['capaRefStr']}
    else:
        refnum = len(malware_dict['References']) + 1

        # Insert reference
        malware_dict["References"][refnum] = config['Malware']['capaRefStr']

    # Check if hash value present, if not, insert
    if capa_dict['SHA256'] not in malware_dict['IoC'][config['Malware']['SHAStr']]:
        malware_dict['IoC'][config['Malware']['SHAStr']].append(capa_dict['SHA256'])

    # Insert attack
    for attack in capa_dict['ATTACK Techniques']:
        if attack["description"] is None:
            continue

        existing_found = False

        if attack["ID"][0] == "T":
            attackType = "ATT&CK Techniques"
        else:
            attackType = "Enhanced ATT&CK Techniques"

        if attack["matches"] == 1:
            description = attack["description"] + " " + "(This capa rule had {} match)".format(attack["matches"])
        else:
            description = attack["description"] + " " + "(This capa rule had {} matches)".format(attack["matches"])
        
        for existing_attack in malware_dict['Behaviors'][attackType]:
            if existing_found:
                break

            for existing_attack_description in existing_attack.Description:
                if description.casefold() in existing_attack_description[0].casefold():
                    existing_found = True
                    continue

            # If the name already exists but capa mapping not present, append capa description
            if attack["name"] in existing_attack.Name and existing_found is False:
                existing_attack.Description.append([description, refnum])
                existing_found = True
                break
        
        if existing_found:
            continue

        # If this is a new mapping
        link = convert_to_attack_link(attack["ID"])
        malware_dict['Behaviors'][attackType].append(Behavior(attack["name"], attack["ID"], link, [(description, refnum)]))

        
    # Insert attack
    for behavior in capa_dict['MBC Behaviors']:
        if behavior["description"] is None:
            continue
        
        existing_found = False

        if behavior["ID"][0] == "E" or behavior["ID"][0] == "F":
            attackType = "Enhanced ATT&CK Techniques"
        else:
            attackType = "MBC Behaviors"

        if behavior["matches"] == 1:
            description = behavior["description"] + " " + "(This capa rule had {} match)".format(behavior["matches"])
        else:
            description = behavior["description"] + " " + "(This capa rule had {} matches)".format(behavior["matches"])

        for existing_behavior in malware_dict['Behaviors'][attackType]:
            if existing_found:
                break
            
            # Check if description present in existing behavior mappings on the malware page, if so, skip
            for existing_behavior_description in existing_behavior.Description:
                if description.casefold() in existing_behavior_description[0].casefold():
                    existing_found = True
                    continue

            # If the name already exists but capa mapping not present, append capa description
            if behavior["name"] in existing_behavior.Name and existing_found is False:
                existing_behavior.Description.append([description, refnum])
                existing_found = True
                break

        if existing_found:
            continue
        
        # If this is a new mapping
        malware_dict['Behaviors'][attackType].append(Behavior(behavior["name"], behavior["ID"], behavior["path"], [(description, refnum)]))

    return malware_dict



def capa_input_into_malware(capa_file_path, malware_file_path):

    # Read files
    capa_file = open(capa_file_path)
    capa_file_lines = capa_file.readlines()
    capa_file.close()

    # Analyze capa file
    capa_dict = analyze_capa_input(capa_file_lines, malware_file_path)

    malware_file = open(malware_file_path)
    malware_file_lines = malware_file.read()
    malware_file.seek(0)
    malware_file.close()

    # Analyze malware file for existing data
    malware_dict = analyze_malware_file_all(malware_file_lines)

    new_malware_dict = insert_capa_input(capa_dict, malware_dict)

    create_malware_corpus_page(new_malware_dict, malware_file_path)

    return


if __name__ == "__main__":    
    if sys.argv[1] == "-h":
        print("This script parses capa input, and insert the appropriate details into the corresponding malware file \n Usage: python3 capa_input_into_malware.py <capa_file> <malware_file>\n")
    
    # capa_file = sys.argv[1]
    # malware_file = sys.argv[2]

    capa_file = "/mnt/c/Users/rxu/Desktop/capa/{}.txt".format(sys.argv[1])
    malware_file = "/home/ryan/MBC/mbc-markdown/xample-malware/{}.md".format(sys.argv[1])

    capa_input_into_malware(capa_file, malware_file)